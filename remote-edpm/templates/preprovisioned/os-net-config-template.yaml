apiVersion: v1
kind: ConfigMap
metadata:
  name: network-config-template
  namespace: openstack
data:
  network_config_template: |
    ---
    {% set mtu_list = [ctlplane_mtu] %}
    {% for network in nodeset_networks %}
    {{ mtu_list.append(lookup('vars', networks_lower[network] ~ '_mtu')) }}
    {%- endfor %}
    {{ ctlplane_dns_nameservers.append('${DNS_SERVER}') }}
    {% set min_viable_mtu = mtu_list | max %}
    network_config:
    - type: ovs_bridge
      name: {{ neutron_physical_bridge_name }}
      mtu: {{ min_viable_mtu }}
      dns_servers: {{ ctlplane_dns_nameservers }}
      domain: {{ dns_search_domains }}
      use_dhcp: false
      addresses:
      - ip_netmask: {{ ctlplane_ip }}/{{ ctlplane_cidr }}
      routes:
      - ip_netmask: {{ ctlplane_ip }}/{{ ctlplane_cidr }}
        next_hop: {{ ctlplane_gateway_ip }}
      members:
    {% for network in nodeset_networks %}
      - type: vlan
        mtu: {{ lookup('vars', networks_lower[network] ~ '_mtu') }}
        vlan_id: {{ lookup('vars', networks_lower[network] ~ '_vlan_id') }}
        addresses:
        - ip_netmask:
            {{ lookup('vars', networks_lower[network] ~ '_ip') }}/{{ lookup('vars', networks_lower[network] ~ '_cidr') }}
        routes: {{ lookup('vars', networks_lower[network] ~ '_host_routes') }}
    {% endfor %}
  network_config_nmstate: "false"
  network_config_hide_sensitive_logs: "false"
  network_config_debug: "true"
  # Uncomment next line to force updating the network, otherwise it will only configure it failed before or never urn
  # network_config_update: "true"
